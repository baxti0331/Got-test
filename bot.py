import logging
import os
import wikipedia
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

logging.basicConfig(level=logging.INFO)

DEFAULT_LANG = "ru"
user_languages = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
wikipedia.set_lang(DEFAULT_LANG)

MAX_QUERY_LENGTH = 100


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –í–∏–∫–∏–ø–µ–¥–∏—è-–±–æ—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/help ‚Äî –ø–æ–º–æ—â—å\n/lang ru –∏–ª–∏ /lang en ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø –∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å.\n"
        "–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —è–∑—ã–∫ –ø–æ–∏—Å–∫–∞: /lang ru –∏–ª–∏ /lang en"
    )


async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —è–∑—ã–∫: /lang ru –∏–ª–∏ /lang en")
        return

    lang = context.args[0].lower()
    if lang in ["ru", "en"]:
        user_languages[update.effective_user.id] = lang
        await update.message.reply_text(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 'ru' –∏ 'en'")


async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()

    if not query:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    if len(query) > MAX_QUERY_LENGTH:
        await update.message.reply_text(
            f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ù–µ –±–æ–ª–µ–µ {MAX_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    user_id = update.effective_user.id
    lang = user_languages.get(user_id, DEFAULT_LANG)
    wikipedia.set_lang(lang)

    try:
        summary = wikipedia.summary(query, sentences=10)
        page = wikipedia.page(query)
        url = page.url

        text = f"üìö –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –¥–ª—è —Ç–µ–±—è:\n\n{summary}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {url}"

        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç—å–µ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=url)]]
        )

        if page.images:
            await update.message.reply_photo(photo=page.images[0], caption=text, reply_markup=keyboard)
        else:
            await update.message.reply_text(text, reply_markup=keyboard)

    except wikipedia.exceptions.DisambiguationError as e:
        options = e.options[:5]
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(opt, callback_data=opt)] for opt in options]
        )
        await update.message.reply_text(
            "ü§î –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )

    except wikipedia.exceptions.PageError:
        await update.message.reply_text(
            "üòû –Ø –Ω–µ –Ω–∞—à—ë–ª —Å—Ç–∞—Ç—å—é –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )
    except Exception:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query.data
    await update.callback_query.answer()

    user_id = update.effective_user.id
    lang = user_languages.get(user_id, DEFAULT_LANG)
    wikipedia.set_lang(lang)

    try:
        summary = wikipedia.summary(query, sentences=10)
        page = wikipedia.page(query)
        url = page.url

        text = f"üìö –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n\n{summary}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {url}"

        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç—å–µ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=url)]]
        )

        if page.images:
            await update.callback_query.message.reply_photo(photo=page.images[0], caption=text, reply_markup=keyboard)
        else:
            await update.callback_query.message.reply_text(text, reply_markup=keyboard)

    except Exception:
        await update.callback_query.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )


if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    PORT = int(os.getenv("PORT", "8443"))  # Render –¥–∞—ë—Ç –ø–æ—Ä—Ç –≤ env

    if not TOKEN:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("lang", set_language))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))

    WEBHOOK_PATH = f"/{TOKEN}"
    WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Webhook: {WEBHOOK_URL}")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )