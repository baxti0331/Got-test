import logging
import os
import wikipedia
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler
)

logging.basicConfig(level=logging.INFO)

DEFAULT_LANG = "ru"
user_languages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

MAX_QUERY_LENGTH = 100

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üåê", callback_data="setlang_ru"),
         InlineKeyboardButton("English üåê", callback_data="setlang_en")]
    ])
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –í–∏–∫–∏–ø–µ–¥–∏—è-–±–æ—Ç.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏.\n"
        "üëá –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        reply_markup=keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üåê", callback_data="setlang_ru"),
         InlineKeyboardButton("English üåê", callback_data="setlang_en")]
    ])
    await update.message.reply_text(
        "‚ÑπÔ∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
        "üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "üí° –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π ‚Äî –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è.\n"
        "üåê –î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "- –°–æ–ª–Ω—Ü–µ\n"
        "- Python programming\n"
        "- –†–æ—Å—Å–∏—è\n",
        parse_mode="HTML",
        reply_markup=keyboard
    )

async def set_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "setlang_ru":
        user_languages[user_id] = "ru"
        await query.answer("–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π üåê")
    elif query.data == "setlang_en":
        user_languages[user_id] = "en"
        await query.answer("Language set to: English üåê")

    await query.edit_message_text("‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query_text = update.message.text.strip()

    if not query_text:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    if len(query_text) > MAX_QUERY_LENGTH:
        await update.message.reply_text(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ù–µ –±–æ–ª–µ–µ {MAX_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_id = update.effective_user.id
    lang = user_languages.get(user_id, DEFAULT_LANG)
    wikipedia.set_lang(lang)

    try:
        summary = wikipedia.summary(query_text, sentences=5)
        page = wikipedia.page(query_text)
        url = page.url

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –ß–∏—Ç–∞—Ç—å –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=url)]
        ])

        text = f"üìö <b>–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:</b>\n\n{summary}"
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=keyboard)

    except wikipedia.exceptions.DisambiguationError as e:
        options = e.options[:5]
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(opt, callback_data=f"search_{opt}")]
            for opt in options
        ])
        await update.message.reply_text(
            "ü§î –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=keyboard
        )

    except wikipedia.exceptions.PageError:
        await update.message.reply_text(
            "üòû –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )
    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {ex}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    if query.data.startswith("setlang_"):
        await set_language_callback(update, context)
    elif query.data.startswith("search_"):
        topic = query.data.replace("search_", "")
        user_id = query.from_user.id
        lang = user_languages.get(user_id, DEFAULT_LANG)
        wikipedia.set_lang(lang)

        try:
            summary = wikipedia.summary(topic, sentences=5)
            page = wikipedia.page(topic)
            url = page.url

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ß–∏—Ç–∞—Ç—å –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=url)]
            ])

            text = f"üìö <b>–í–æ—Ç —É—Ç–æ—á–Ω—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n{summary}"
            await query.message.reply_text(text, parse_mode="HTML", reply_markup=keyboard)
            await query.answer()
        except Exception as ex:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {ex}")
            await query.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Ç–æ—á–Ω—ë–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É."
            )
            await query.answer()

if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    PORT = int(os.getenv("PORT", "8443"))

    if not TOKEN:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))

    WEBHOOK_PATH = f"/{TOKEN}"
    WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

    logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Webhook: {WEBHOOK_URL}")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )