import os
import json
import threading
import time
import schedule
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters

TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=TOKEN)

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
tasks = []
data_file = "tasks.json"

# ================= –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===================

def load_tasks():
    global tasks
    if os.path.exists(data_file):
        with open(data_file, "r") as f:
            tasks = json.load(f)
    else:
        tasks = []

def save_tasks():
    with open(data_file, "w") as f:
        json.dump(tasks, f, indent=4)

# =================== –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ====================

def control_panel(update: Update, context: CallbackContext):
    buttons = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É", callback_data="add_interval")],
        [InlineKeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data="add_daily")],
        [InlineKeyboardButton("üìÜ –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ", callback_data="add_weekly")],
        [InlineKeyboardButton("üóì –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ", callback_data="add_monthly")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="show_tasks")]
    ]
    markup = InlineKeyboardMarkup(buttons)
    update.message.reply_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

# ================ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===================

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "add_interval":
        query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö —á–µ—Ä–µ–∑ `|`. –ü—Ä–∏–º–µ—Ä:\n–ü—Ä–∏–≤–µ—Ç! | 15", parse_mode='Markdown')
        context.user_data["mode"] = "interval"

    elif query.data == "add_daily":
        query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è (HH:MM) —á–µ—Ä–µ–∑ `|`. –ü—Ä–∏–º–µ—Ä:\n–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! | 09:00", parse_mode='Markdown')
        context.user_data["mode"] = "daily"

    elif query.data == "add_weekly":
        query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏/–≤—Ä–µ–º—è —á–µ—Ä–µ–∑ `|`. –ü—Ä–∏–º–µ—Ä:\n–û—Ç—á—ë—Ç | Monday 10:00", parse_mode='Markdown')
        context.user_data["mode"] = "weekly"

    elif query.data == "add_monthly":
        query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞/–≤—Ä–µ–º—è —á–µ—Ä–µ–∑ `|`. –ü—Ä–∏–º–µ—Ä:\n–°–æ–±—Ä–∞–Ω–∏–µ | 1 10:00", parse_mode='Markdown')
        context.user_data["mode"] = "monthly"

    elif query.data == "show_tasks":
        text = "–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n"
        for idx, task in enumerate(tasks, 1):
            desc = f"{idx}. [{task['type']}] {task['text'][:20]}..."
            if task['type'] == "interval":
                desc += f" –∫–∞–∂–¥—ã–µ {task['interval']} –º–∏–Ω—É—Ç"
            elif task['type'] == "daily":
                desc += f" –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {task['time']}"
            elif task['type'] == "weekly":
                desc += f" –∫–∞–∂–¥—É—é {task['weekday']} –≤ {task['time']}"
            elif task['type'] == "monthly":
                desc += f" –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü {task['day']} —á–∏—Å–ª–∞ –≤ {task['time']}"
            text += desc + "\n"
        if not tasks:
            text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
        query.edit_message_text(text)

# ================= –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á ===================

def message_handler(update: Update, context: CallbackContext):
    mode = context.user_data.get("mode")

    if mode == "interval":
        try:
            text, interval = update.message.text.split("|")
            task = {
                "text": text.strip(),
                "interval": int(interval.strip()),
                "type": "interval",
                "photo_file_id": None,
                "video_file_id": None,
                "last_sent": None
            }
            tasks.append(task)
            save_tasks()
            update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: –∫–∞–∂–¥—ã–µ {task['interval']} –º–∏–Ω—É—Ç.\n–ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            context.user_data["last_task"] = task
        except:
            update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä:\n–°–æ–æ–±—â–µ–Ω–∏–µ | 15")

    elif mode == "daily":
        try:
            text, time_str = update.message.text.split("|")
            task = {
                "text": text.strip(),
                "time": time_str.strip(),
                "type": "daily",
                "photo_file_id": None,
                "video_file_id": None
            }
            tasks.append(task)
            save_tasks()
            schedule.every().day.at(task["time"]).do(send_task, task=task)
            update.message.reply_text(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {task['time']}. –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            context.user_data["last_task"] = task
        except:
            update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä:\n–°–æ–æ–±—â–µ–Ω–∏–µ | 09:00")

    elif mode == "weekly":
        try:
            text, when = update.message.text.split("|")
            weekday, time_str = when.strip().split()
            task = {
                "text": text.strip(),
                "weekday": weekday.capitalize(),
                "time": time_str,
                "type": "weekly",
                "photo_file_id": None,
                "video_file_id": None
            }
            tasks.append(task)
            save_tasks()
            getattr(schedule.every(), weekday.lower()).at(task["time"]).do(send_task, task=task)
            update.message.reply_text(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task['weekday']} –≤ {task['time']}. –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            context.user_data["last_task"] = task
        except:
            update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä:\n–°–æ–æ–±—â–µ–Ω–∏–µ | Monday 10:00")

    elif mode == "monthly":
        try:
            text, when = update.message.text.split("|")
            day, time_str = when.strip().split()
            task = {
                "text": text.strip(),
                "day": int(day),
                "time": time_str,
                "type": "monthly",
                "photo_file_id": None,
                "video_file_id": None,
                "last_sent_date": None
            }
            tasks.append(task)
            save_tasks()
            update.message.reply_text(f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task['day']} —á–∏—Å–ª–∞ –≤ {task['time']}. –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            context.user_data["last_task"] = task
        except:
            update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä:\n–°–æ–æ–±—â–µ–Ω–∏–µ | 1 10:00")

    context.user_data["mode"] = None

    # –§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏
    if update.message.photo and context.user_data.get("last_task"):
        file_id = update.message.photo[-1].file_id
        context.user_data["last_task"]["photo_file_id"] = file_id
        context.user_data["last_task"]["video_file_id"] = None
        save_tasks()
        update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")

    if update.message.video and context.user_data.get("last_task"):
        file_id = update.message.video.file_id
        context.user_data["last_task"]["video_file_id"] = file_id
        context.user_data["last_task"]["photo_file_id"] = None
        save_tasks()
        update.message.reply_text("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")

# ================ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===================

def send_task(task):
    if task.get("photo_file_id"):
        bot.send_photo(chat_id=CHAT_ID, photo=task["photo_file_id"], caption=task["text"])
    elif task.get("video_file_id"):
        bot.send_video(chat_id=CHAT_ID, video=task["video_file_id"], caption=task["text"])
    else:
        bot.send_message(chat_id=CHAT_ID, text=task["text"])

    task["last_sent"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_tasks()

# ============== –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –º–µ—Å—è—Ü–µ–≤ ==============

def task_loop():
    while True:
        now = datetime.now()

        for task in tasks:
            if task["type"] == "interval":
                last = datetime.strptime(task["last_sent"], "%Y-%m-%d %H:%M:%S") if task.get("last_sent") else None
                if not last or (now - last) >= timedelta(minutes=task["interval"]):
                    send_task(task)

            if task["type"] == "monthly":
                last_date = task.get("last_sent_date")
                if now.day == task["day"] and now.strftime("%H:%M") == task["time"]:
                    if last_date != now.strftime("%Y-%m-%d"):
                        send_task(task)
                        task["last_sent_date"] = now.strftime("%Y-%m-%d")
                        save_tasks()

        schedule.run_pending()
        time.sleep(10)

# ================== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ==================

def main():
    load_tasks()

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", control_panel))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, message_handler))
    dp.add_handler(MessageHandler(Filters.photo | Filters.video, message_handler))

    for task in tasks:
        if task["type"] == "daily":
            schedule.every().day.at(task["time"]).do(send_task, task=task)
        if task["type"] == "weekly":
            getattr(schedule.every(), task["weekday"].lower()).at(task["time"]).do(send_task, task=task)

    threading.Thread(target=task_loop, daemon=True).start()

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()