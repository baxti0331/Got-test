import os
import random
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, —à—É—Ç–æ–∫ –∏ –∑–∞–≥–∞–¥–æ–∫
quiz_questions = [
    {"question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 3 + 5?", "answers": ["7", "8", "9"], "correct": "8"},
    {"question": "–°—Ç–æ–ª–∏—Ü–∞ –ò—Ç–∞–ª–∏–∏?", "answers": ["–†–∏–º", "–ú–∞–¥—Ä–∏–¥", "–ü–∞—Ä–∏–∂"], "correct": "–†–∏–º"},
    {"question": "–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", "answers": ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–¢–∏—Ö–∏–π"], "correct": "–¢–∏—Ö–∏–π"},
]

jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ 31 Oct = 25 Dec.",
    "–í—Å—ë –ª–æ–º–∞–µ—Ç—Å—è. –î–∞–∂–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –Ω–∞–ø–∏—Å–∞–ª.",
    "–ö–∞–∫ –∑–æ–≤—É—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞-–≤–æ–ª—à–µ–±–Ω–∏–∫–∞? –ê–ª–≥–æ—Ä–∏—Ç–º–æ–≤–∏—á!"
]

truth_or_lie_statements = [
    {"statement": "–°–æ–ª–Ω—Ü–µ ‚Äî –∑–≤–µ–∑–¥–∞.", "truth": True},
    {"statement": "–ß–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –¥—ã—à–∞—Ç—å –ø–æ–¥ –≤–æ–¥–æ–π –±–µ–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.", "truth": False},
    {"statement": "Python ‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.", "truth": True},
]

riddles = [
    {"question": "–ß—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏?", "answers": ["–°–æ–Ω", "–°–≤–µ—Ç", "–ù–∏—á–µ–≥–æ"], "correct": "–°–æ–Ω"},
    {"question": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç?", "answers": ["–í—Ä–µ–º—è", "–ü–æ–µ–∑–¥", "–≠—Ö–æ"], "correct": "–í—Ä–µ–º—è"},
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz")],
        [InlineKeyboardButton("üòÇ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="joke")],
        [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data="time")],
        [InlineKeyboardButton("üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="guess")],
        [InlineKeyboardButton("‚úä –ö–∞–º–µ–Ω—å/–ù–æ–∂–Ω–∏—Ü—ã/–ë—É–º–∞–≥–∞", callback_data="rps")],
        [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞", callback_data="dice")],
        [InlineKeyboardButton("üß† –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å", callback_data="truthlie")],
        [InlineKeyboardButton("üïµ –ó–∞–≥–∞–¥–∫–∞", callback_data="riddle")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "quiz":
        question = random.choice(quiz_questions)
        context.user_data['quiz'] = question
        buttons = [[InlineKeyboardButton(ans, callback_data=f"answer:{ans}")] for ans in question['answers']]
        await query.edit_message_text(question['question'], reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("answer:"):
        selected = query.data.split(":", 1)[1]
        question = context.user_data.get('quiz')
        result = "‚úÖ –í–µ—Ä–Ω–æ!" if question and selected == question['correct'] else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–≤–µ—Ç: {question['correct']}"
        await query.edit_message_text(result)

    elif query.data == "joke":
        await query.edit_message_text(random.choice(jokes))

    elif query.data == "time":
        now = datetime.now().strftime("%H:%M:%S %d-%m-%Y")
        await query.edit_message_text(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")

    elif query.data == "guess":
        number = random.randint(1, 5)
        context.user_data['secret'] = number
        buttons = [[InlineKeyboardButton(str(n), callback_data=f"guess_number:{n}")] for n in range(1, 6)]
        await query.edit_message_text("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å:", reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("guess_number:"):
        guess = int(query.data.split(":")[1])
        secret = context.user_data.get('secret')
        result = "üéâ –¢—ã —É–≥–∞–¥–∞–ª!" if guess == secret else f"–ù–µ—Ç, —è –∑–∞–≥–∞–¥–∞–ª {secret}."
        await query.edit_message_text(result)

    elif query.data == "rps":
        buttons = [
            [InlineKeyboardButton("–ö–∞–º–µ–Ω—å", callback_data="rps_choice:–ö–∞–º–µ–Ω—å"),
             InlineKeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_choice:–ù–æ–∂–Ω–∏—Ü—ã"),
             InlineKeyboardButton("–ë—É–º–∞–≥–∞", callback_data="rps_choice:–ë—É–º–∞–≥–∞")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("rps_choice:"):
        user_choice = query.data.split(":")[1]
        bot_choice = random.choice(["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"])
        outcome = "–ù–∏—á—å—è!"
        if (user_choice == "–ö–∞–º–µ–Ω—å" and bot_choice == "–ù–æ–∂–Ω–∏—Ü—ã") or \
           (user_choice == "–ù–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–ë—É–º–∞–≥–∞") or \
           (user_choice == "–ë—É–º–∞–≥–∞" and bot_choice == "–ö–∞–º–µ–Ω—å"):
            outcome = "–¢—ã –ø–æ–±–µ–¥–∏–ª!"
        elif user_choice != bot_choice:
            outcome = "–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!"
        await query.edit_message_text(f"–¢—ã –≤—ã–±—Ä–∞–ª: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n{outcome}")

    elif query.data == "dice":
        roll = random.randint(1, 6)
        await query.edit_message_text(f"–¢—ã –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫ –∏ –≤—ã–ø–∞–ª–æ: {roll}")

    elif query.data == "truthlie":
        statement = random.choice(truth_or_lie_statements)
        context.user_data['truth'] = statement
        buttons = [
            [InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="truth_answer:True"),
             InlineKeyboardButton("–õ–æ–∂—å", callback_data="truth_answer:False")]
        ]
        await query.edit_message_text(statement['statement'], reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("truth_answer:"):
        user_answer = query.data.split(":")[1] == "True"
        correct = context.user_data.get('truth', {}).get('truth')
        result = "‚úÖ –í–µ—Ä–Ω–æ!" if user_answer == correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        await query.edit_message_text(result)

    elif query.data == "riddle":
        riddle = random.choice(riddles)
        context.user_data['riddle'] = riddle
        buttons = [[InlineKeyboardButton(ans, callback_data=f"riddle_answer:{ans}")] for ans in riddle['answers']]
        await query.edit_message_text(riddle['question'], reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("riddle_answer:"):
        selected = query.data.split(":")[1]
        riddle = context.user_data.get('riddle')
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if riddle and selected == riddle['correct'] else f"‚ùå –ù–µ—Ç, –æ—Ç–≤–µ—Ç: {riddle['correct']}"
        await query.edit_message_text(result)

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()