import logging
import os
import wikipedia
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, filters
)

logging.basicConfig(level=logging.INFO)

DEFAULT_LANG = "ru"
wikipedia.set_lang(DEFAULT_LANG)

user_languages = {}
MAX_QUERY_LENGTH = 100

MESSAGES = {
    "ru": {
        "start": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –í–∏–∫–∏–ø–µ–¥–∏—è-–ë–æ—Ç.\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏.\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        "language_set": "üåê –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π üá∑üá∫.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å!",
        "empty": "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.",
        "long": f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º—É–º {MAX_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
        "not_found": "üòû –Ø –Ω–µ –Ω–∞—à—ë–ª —Å—Ç–∞—Ç—å—é –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
        "disambiguation": "ü§î –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π, —É—Ç–æ—á–Ω–∏ –æ–¥–Ω—É –∏–∑ —Ç–µ–º:",
        "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
        "result": "üìö –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –¥–ª—è —Ç–µ–±—è:",
        "more": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏"
    },
    "en": {
        "start": "üëã Hi! I'm your Wikipedia Bot.\n\nSend me any word or phrase, and I'll find information from Wikipedia.\nYou can change the search language using the buttons below.",
        "language_set": "üåê Language changed to English üá¨üáß.\nNow send your query!",
        "empty": "‚ùó Please send a non-empty query.",
        "long": f"‚ö†Ô∏è Your query is too long! Maximum {MAX_QUERY_LENGTH} characters.",
        "not_found": "üòû I couldn't find an article for your query. Try another one.",
        "disambiguation": "ü§î Your query is too general, please clarify one of these topics:",
        "error": "‚ö†Ô∏è An error occurred. Please try again later.",
        "result": "üìö Here's what I found for you:",
        "more": "Read more on Wikipedia"
    },
    "uz": {
        "start": "üëã Salom! Men Vikipediya botiman.\n\nMenga so'z yoki ibora yuboring, men Vikipediyadan ma'lumot topaman.\nTilni pastdagi tugmalar orqali o'zgartirishingiz mumkin.",
        "language_set": "üåê Til o'zgartirildi: O'zbek üá∫üáø.\nEndi so'rov yuboring!",
        "empty": "‚ùó Iltimos, bo'sh so'rov yubormang.",
        "long": f"‚ö†Ô∏è So'rov juda uzun! Maksimal {MAX_QUERY_LENGTH} ta belgi.",
        "not_found": "üòû So'rov bo'yicha maqola topilmadi. Boshqa so'rov urinib ko'ring.",
        "disambiguation": "ü§î So'rovingiz juda umumiy, iltimos, quyidagi mavzulardan birini aniqlang:",
        "error": "‚ö†Ô∏è Xatolik yuz berdi. Keyinroq urinib ko'ring.",
        "result": "üìö Siz uchun topdim:",
        "more": "Vikipediyada batafsil"
    },
    "kk": {
        "start": "üëã –°”ô–ª–µ–º! –ú–µ–Ω –£–∏–∫–∏–ø–µ–¥–∏—è –±–æ—Ç—ã–º—ã–Ω.\n\n–ú–∞“ì–∞–Ω —Å”©–∑ –Ω–µ–º–µ—Å–µ —Ç—ñ—Ä–∫–µ—Å –∂—ñ–±–µ—Ä—ñ“£—ñ–∑, –º–µ–Ω –£–∏–∫–∏–ø–µ–¥–∏—è–¥–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±–∞–º—ã–Ω.\n–¢—ñ–ª–¥—ñ —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Ç“Ø–π–º–µ–ª–µ—Ä –∞—Ä“õ—ã–ª—ã ”©–∑–≥–µ—Ä—Ç—É–≥–µ –±–æ–ª–∞–¥—ã.",
        "language_set": "üåê –¢—ñ–ª ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ: “ö–∞–∑–∞“õ—à–∞ üá∞üáø.\n–ï–Ω–¥—ñ —Å“±—Ä–∞–Ω—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!",
        "empty": "‚ùó ”®—Ç—ñ–Ω–µ–º—ñ–Ω, –±–æ—Å —Å“±—Ä–∞–Ω—ã—Å –∂—ñ–±–µ—Ä–º–µ“£—ñ–∑.",
        "long": f"‚ö†Ô∏è –°“±—Ä–∞–Ω—ã—Å —Ç—ã–º “±–∑–∞“õ! –ï“£ –∫”©–±—ñ {MAX_QUERY_LENGTH} —Ç–∞“£–±–∞.",
        "not_found": "üòû –°“±—Ä–∞–Ω—ã—Å –±–æ–π—ã–Ω—à–∞ –º–∞“õ–∞–ª–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã. –ë–∞—Å“õ–∞ —Å“±—Ä–∞–Ω—ã—Å –∂–∞—Å–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        "disambiguation": "ü§î –°“±—Ä–∞–Ω—ã—Å —Ç—ã–º –∂–∞–ª–ø—ã, –Ω–∞“õ—Ç—ã–ª–∞–ø —Ç–∞“£–¥–∞“£—ã–∑:",
        "error": "‚ö†Ô∏è “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        "result": "üìö –ú—ñ–Ω–µ, —Å—ñ–∑–≥–µ —Ç–∞–ø“õ–∞–Ω—ã–º:",
        "more": "–£–∏–∫–∏–ø–µ–¥–∏—è–¥–∞ —Ç–æ–ª—ã“ì—ã—Ä–∞“õ"
    },
    "ky": {
        "start": "üëã –°–∞–ª–∞–º! –ú–µ–Ω –í–∏–∫–∏–ø–µ–¥–∏—è –±–æ—Ç—É.\n\n–ú–∞–≥–∞ —Å”©–∑ –∂–µ —Å“Ø–π–ª”©–º –∂–∏–±–µ—Ä–∏“£–∏–∑, –º–µ–Ω –í–∏–∫–∏–ø–µ–¥–∏—è–¥–∞–Ω –º–∞–∞–ª—ã–º–∞—Ç —Ç–∞–±–∞–º.\n–¢–∏–ª–¥–∏ —Ç”©–º”©–Ω–∫“Ø –±–∞—Å–∫—ã—á—Ç–∞—Ä –∞—Ä–∫—ã–ª—É—É –∞–ª–º–∞—à—Ç—ã—Ä–∞ –∞–ª–∞—Å—ã–∑.",
        "language_set": "üåê –¢–∏–ª ”©–∑–≥”©—Ä—Ç“Ø–ª–¥“Ø: –ö—ã—Ä–≥—ã–∑—á–∞ üá∞üá¨.\n–≠–º–∏ —Å—É—Ä–æ–æ –∂–∏–±–µ—Ä–∏“£–∏–∑!",
        "empty": "‚ùó –°—É—Ä–∞–Ω—ã—á, –±–æ—à —Å—É—Ä–æ–æ –∂–∏–±–µ—Ä–±–µ“£–∏–∑.",
        "long": f"‚ö†Ô∏è –°—É—Ä–æ–æ ”©—Ç”© —É–∑—É–Ω! –ú–∞–∫—Å–∏–º–∞–ª–¥—É—É {MAX_QUERY_LENGTH} —Ç–∞–º–≥–∞.",
        "not_found": "üòû –°—É—Ä–æ–æ –±–æ—é–Ω—á–∞ –º–∞–∫–∞–ª–∞ —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫. –ë–∞—à–∫–∞ —Å—É—Ä–æ–æ –±–µ—Ä–∏–ø –∫”©—Ä“Ø“£“Ø–∑.",
        "disambiguation": "ü§î –°—É—Ä–æ–æ“£—É–∑ ”©—Ç”© –∂–∞–ª–ø—ã, —Ç–∞–∫—Ç–∞–ø –±–µ—Ä–∏“£–∏–∑:",
        "error": "‚ö†Ô∏è –ö–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –ö–∏–π–∏–Ω—á–µ—Ä—ç—ç–∫ –∫–∞–π—Ä—ã–ª—ã“£—ã–∑.",
        "result": "üìö –°–∏–∑ “Ø—á“Ø–Ω —Ç–∞–ø—Ç—ã–º:",
        "more": "–í–∏–∫–∏–ø–µ–¥–∏—è–¥–∞–Ω –∫–µ–Ω–µ–Ω–∏—Ä—ç—ç–∫ –æ–∫—É—É"
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_languages[user_id] = DEFAULT_LANG

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"),
            InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"),
        ],
        [
            InlineKeyboardButton("O'zbek üá∫üáø", callback_data="lang_uz"),
            InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="lang_kk"),
            InlineKeyboardButton("–ö—ã—Ä–≥—ã–∑—á–∞ üá∞üá¨", callback_data="lang_ky")
        ]
    ])

    await update.message.reply_text(MESSAGES[DEFAULT_LANG]["start"], reply_markup=keyboard)

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    code = query.data.replace("lang_", "")
    if code in MESSAGES:
        user_languages[user_id] = code
        await query.answer()
        await query.edit_message_text(MESSAGES[code]["language_set"])
    else:
        await query.answer("Unknown language.")

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    user_id = update.effective_user.id
    lang = user_languages.get(user_id, DEFAULT_LANG)
    msg = MESSAGES[lang]

    if not query:
        await update.message.reply_text(msg["empty"])
        return

    if len(query) > MAX_QUERY_LENGTH:
        await update.message.reply_text(msg["long"])
        return

    try:
        wikipedia.set_lang(lang)
        try:
            summary = wikipedia.summary(query, sentences=3)
            page = wikipedia.page(query)
        except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):
            search_results = wikipedia.search(query)
            if not search_results:
                await update.message.reply_text(msg["not_found"])
                return
            corrected_query = search_results[0]
            summary = wikipedia.summary(corrected_query, sentences=3)
            page = wikipedia.page(corrected_query)

        url = page.url
        text = f"{msg['result']}\n\n{summary}"

        image_url = next((img for img in page.images if img.lower().endswith(('.jpg', '.jpeg', '.png'))), None)

        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(msg['more'], url=url)]]
        )

        if image_url:
            await update.message.reply_photo(photo=image_url, caption=text, reply_markup=keyboard)
        else:
            await update.message.reply_text(text, reply_markup=keyboard)

    except wikipedia.exceptions.DisambiguationError as e:
        options = e.options[:5]
        opts_text = "\n".join(f"- {opt}" for opt in options)
        await update.message.reply_text(f"{msg['disambiguation']}\n{opts_text}")
    except wikipedia.exceptions.PageError:
        await update.message.reply_text(msg["not_found"])
    except Exception:
        await update.message.reply_text(msg["error"])


if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    PORT = int(os.getenv("PORT", "8443"))
    RENDER_HOST = os.getenv('RENDER_EXTERNAL_HOSTNAME')

    if not TOKEN or not RENDER_HOST:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö!")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))

    WEBHOOK_PATH = f"/{TOKEN}"
    WEBHOOK_URL = f"https://{RENDER_HOST}{WEBHOOK_PATH}"

    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )