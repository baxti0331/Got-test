import logging
import os
import wikipedia
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters

logging.basicConfig(level=logging.INFO)

# –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_LANG = "ru"
wikipedia.set_lang(DEFAULT_LANG)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_languages = {}

MAX_QUERY_LENGTH = 100

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_languages[user_id] = DEFAULT_LANG

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"),
            InlineKeyboardButton("English üá¨üáß", callback_data="lang_en"),
            InlineKeyboardButton("O'zbek üá∫üáø", callback_data="lang_uz")
        ]
    ])

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –í–∏–∫–∏–ø–µ–¥–∏—è-–ë–æ—Ç.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏.\n"
        "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "lang_ru":
        user_languages[user_id] = "ru"
        lang_text = "–†—É—Å—Å–∫–∏–π üá∑üá∫"
    elif query.data == "lang_en":
        user_languages[user_id] = "en"
        lang_text = "English üá¨üáß"
    elif query.data == "lang_uz":
        user_languages[user_id] = "uz"
        lang_text = "O'zbek üá∫üáø"
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫.")
        return

    await query.answer()
    await query.edit_message_text(f"üåê –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_text}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å!")

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    user_id = update.effective_user.id
    lang = user_languages.get(user_id, DEFAULT_LANG)

    if not query:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    if len(query) > MAX_QUERY_LENGTH:
        await update.message.reply_text(
            f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º—É–º {MAX_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    try:
        wikipedia.set_lang(lang)
        summary = wikipedia.summary(query, sentences=3)
        page = wikipedia.page(query)
        url = page.url

        text = f"üìö –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –¥–ª—è —Ç–µ–±—è:\n\n{summary}\n\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏]({url})"

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = None
        for img in page.images:
            if img.lower().endswith(('.jpg', '.jpeg', '.png')):
                image_url = img
                break

        if image_url:
            await update.message.reply_photo(photo=image_url, caption=text, parse_mode="Markdown")
        else:
            await update.message.reply_text(text, parse_mode="Markdown")

    except wikipedia.exceptions.DisambiguationError as e:
        options = e.options[:5]
        opts_text = "\n".join(f"- {opt}" for opt in options)
        await update.message.reply_text(
            f"ü§î –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π, —É—Ç–æ—á–Ω–∏ –æ–¥–Ω—É –∏–∑ —Ç–µ–º:\n{opts_text}"
        )
    except wikipedia.exceptions.PageError:
        await update.message.reply_text(
            "üòû –Ø –Ω–µ –Ω–∞—à—ë–ª —Å—Ç–∞—Ç—å—é –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )


if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    PORT = int(os.getenv("PORT", "8443"))
    RENDER_HOST = os.getenv('RENDER_EXTERNAL_HOSTNAME')

    if not TOKEN or not RENDER_HOST:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))

    WEBHOOK_PATH = f"/{TOKEN}"
    WEBHOOK_URL = f"https://{RENDER_HOST}{WEBHOOK_PATH}"

    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )